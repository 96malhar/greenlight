version: '3'

dotenv: [ env/.dev.env ]

tasks:
  docker:postgres:start:
    desc: Start a Postgres server via docker compose
    cmds:
      - docker compose up -d db

  docker:postgres:stop:
    desc: Stops Postgres server via docker compose
    cmds:
      - docker compose stop db

  docker:server:start:
    desc: Start the Greenlight API server via docker compose
    cmds:
      - docker compose up -d --build api

  docker:server:stop:
    desc: Stop the Greenlight API server via docker compose
    cmds:
      - docker compose stop api

  db:setup:
    desc: Setup the database and the database user used by the greenlight app
    cmds:
      - go run ./cmd/db setup

  db:teardown:
    desc: Teardown the database and the database user used by the greenlight app
    cmds:
      - go run ./cmd/db teardown

  db:migrations:new:
    desc: Creates a new migration file
    cmds:
      - echo "Creating migration files for {{.CLI_ARGS}}..."
      - migrate create -seq -ext=.sql -dir=./migrations {{.CLI_ARGS}}

  db:migrations:up:
    desc: Runs up migrations
    cmds:
      - echo "Running up migrations..."
      - migrate -path ./migrations -database ${GREENLIGHT_DB_DSN} up

  db:migrations:down:
    desc: Runs down migrations
    cmds:
      - echo "Running down migrations..."
      - echo "y" | migrate -path ./migrations -database ${GREENLIGHT_DB_DSN} down

  server:help:
    desc: Show help for the Greenlight API server
    cmds:
      - go run ./cmd/api -help

  server:build:
    desc: Build the Greenlight API server
    cmds:
      - go build -ldflags '-s' -o ./bin/api ./cmd/api

  server:start:
    desc: Builds and starts the Greenlight API server
    cmds:
      - task: server:build
      - ./bin/api {{.CLI_ARGS}}

  update:dependencies:
    desc: Update dependencies
    cmds:
      - go get -u -t ./...
      - go mod tidy

  audit:
    desc: Run quality control audits
    cmds:
      - echo "Tidying and verifying module dependencies..."
      - go mod tidy
      - go mod verify
      - echo "Formatting code..."
      - go fmt ./...
      - echo "Vetting code..."
      - go vet ./...
      - staticcheck ./...
      - echo "Checking vulnerabilities..."
      - govulncheck ./...

  smoketest:
    desc: Run the smoke test
    dotenv: [ env/.smoketest.env ]
    cmds:
      - defer: go run ./cmd/db teardown
      - go run ./cmd/db setup
      - migrate -path ./migrations -database $GREENLIGHT_DB_DSN up
      - ./smoke_test.sh

  test:
    desc: Run all tests
    cmds:
      - go test -json -v --coverprofile=coverage.out ./... 2>&1 | gotestfmt -hide "successful-tests, empty-packages"

  loadtest:
    desc: Run the load test
    summary: Creates a fresh database, runs migrations, and runs the load test.
      The command uses 'Hey' to perform the load test. It registers a new user and then repeatedly
      invokes the /v1/tokens/authentication endpoint to generate authentication tokens.
    dotenv: [ env/.smoketest.env ]
    cmds:
      - defer: go run ./cmd/db teardown
      - go run ./cmd/db setup
      - migrate -path ./migrations -database $GREENLIGHT_DB_DSN up
      - ./load_test.sh
